import{c as h,o as i,b as p,p as f}from"./index-DxRgMXU3.js";const g=()=>{const{user:e}=h(),d=()=>i.get("/sanctum/csrf-cookie");return{addHistory:async r=>{const l={serialNumber:r.serialNumber,userId:e==null?void 0:e.id,status:r.status};console.log(l),await d(),i.post("/api/scan-history",l).then(n=>{console.log(n)}).catch(n=>{if(n.response.status!==422)throw n})}}},C=()=>{const e=()=>i.get("/sanctum/csrf-cookie"),d=p(),{addHistory:u}=g(),{userId:r}=h(),{data:l,error:n,mutate:y}=f("/api/cylinder",()=>i.get("/api/cylinder").then(s=>s.data).catch(s=>{if(s.response.status!==409)throw s}));return{cylinder:l,checkSerial:async({setAddDisable:s,setMessage:o,setModalOpen:t,...a})=>{await e(),i.get(`/api/cylinder/${a.eccId}`).then(c=>{console.log(c.data),c.data.data?+c.data.data.isDisposed==1?(s(!0),o("Cylinder is already disposed"),t(!0)):d("/scanned-result",{replace:!0,state:c.data}):(s(!1),o("The cylinder cover does not exist. Do you want to add it?"),t(!0)),y()}).catch(c=>{if(c.response.status!==422)throw c})},addCylinder:async s=>{const o={serialNumber:s,isDisposed:2,status:"Storage",location:"None",userId:r};await e(),console.log(o),i.post("/api/cylinder",o).then(t=>{const a={serialNumber:s,status:2};console.log(t),u(a),d("/scanned-result",{state:t.data}),y()}).catch(t=>{if(t.response.status!==422)throw t})},updateCylinder:async s=>{const o={serialNumber:s.serialNumber,isDisposed:s.isDisposed,status:s.status,cycle:s.cycle},t=s.id;await e(),i.put(`/api/cylinder/${t}`,o).then(a=>{console.log(a)}).catch(a=>{if(a.response.status!==409)throw a})}}};export{C as u};
